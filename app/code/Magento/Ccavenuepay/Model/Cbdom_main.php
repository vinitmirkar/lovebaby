<?php /*Payment Name      : CCAvenue MCPGDescription		  : Extends Payment with  CCAvenue MCPG.CCAvenue Version  : MCPG-2.0Module Version    : bz-3.0Author			  : BlueZeal SoftNet Copyright         : © 2014-2015 *//*** * This code coonect with the opencart databse for inserting the module details into the user server.* */namespace Magento\Ccavenuepay\Model;use Magento\Framework\App\ObjectManager;$app_path = BP . '/app';//echo $myModuleDir;//$app_path = Mage::getBaseDir('app');$replaced_app_path = str_replace("\\","/",$app_path);if (!defined ("DOM_BZ_PATH_PG_MAIN_201")){	define("DOM_BZ_PATH_PG_MAIN_201",$replaced_app_path.'/code/local/Mage/Ccavenuepay/Model/Cbdom_main.php');  }//$cbdom_path = BP.'/vendor/magento/module-user/Api/Data/';  $cbdom_path = BP.'/app/code/Magento/Ccavenuepay/Gateway/Request/';$cbdom_path = str_replace("\\","/",$cbdom_path);if (!defined ("DOM_BZ_PATH_PG_201")){	define("DOM_BZ_PATH_PG_201", $cbdom_path);}//$cbdom_ini_path = BP.'/vendor/magento/module-user/Api/Data/';  $cbdom_ini_path = BP.'/app/code/Magento/Ccavenuepay/Gateway/Request/';$cbdom_ini_path = str_replace("\\","/",$cbdom_ini_path);$base_path = BP;if (!defined ("DOM_BZ_PATH_PG_INI_201")){	define("DOM_BZ_PATH_PG_INI_201",$cbdom_ini_path);} /*define("BZCCPG_MOD_VERSION","2.2");define("BZCCPG_CAT","CCAvenue");define("BZCCPG_CAT_VER","MCPG-2.0");define("BZCCPG_CMS","Magento");define("BZCCPG_PGCMS_VER","2.0.2");define("BZCCPG_IP","59.93.27.215");define("BZCCPG_DOMAIN",$_SERVER['HTTP_HOST']);define("BZCCPG_API_ACCES","");define("BZCCPG_LICENCE_KEY","FREE");*///$dom	= "9ec66b15389a4e6c5d510b912a144b21215593a3741cad62042c5f0d57f117887995776739b77bdeff869b8db06760f6";//define("BZCCPG_API_URI",$dom);/* $file = DOM_BZ_PATH_PG_201;if (file_exists(DOM_BZ_PATH_PG_201.'Cbdom.php')) {	include_once(DOM_BZ_PATH_PG_201.'Cbdom.php');	}  *///echo DOM_BZ_PATH_PG_201;class Cbdom_main{	/*	const BZCCPG_MOD_VERSION	= '2.2';	const BZCCPG_CAT			= 'CCAvenue';	const BZCCPG_CAT_VER		= 'MCPG-2.0';	const BZCCPG_CMS			= 'Magento';	const BZCCPG_PGCMS_VER		= '2.0.2';	const BZCCPG_API_ACCES		= '';	const BZCCPG_LICENCE_KEY	= 'FREE';	*/	 	private  $logger;	private  $_default_currency	= "INR";	private  $_default_language = "EN";	private  $_pg_live_url		= 'https://secure.ccavenue.com/transaction/transaction.do?command=initiateTransaction';	private  $_pg_test_url		= 'https://secure.ccavenue.com/transaction/transaction.do?command=initiateTransaction';	private  $_errors			=array();	private  $_license_api_table="apibzcc";	private  $_license_api_table_prefix="bzccpg_";	private  $_ini_created		=false;	private	 $_pgmod_ver			= "";		/*==> Module Version*/	private	 $_pgcat				= "";		/*==>Category*/	private	 $_pgcat_ver  		= "";		/*==>Category Version*/	private  $_pgcms 			= "";		/*==>CMS*/	private	 $_pgcms_ver 		= "";		/*==>CMS Version*/	private	 $_pg_lic_key 		= '';		/*Payment module license key*/	public function __construct(){		$writer = new \Zend\Log\Writer\Stream(BP . '/var/log/test.log');		$this->logger = new \Zend\Log\Logger();		$this->logger->addWriter($writer);		$this->logger->info("Cbdom_main __construct ");		//$this->init();	}		/* public function __construct(){	}	 */ 	/* Encrypt and Decrypt functions*/	public function getAllowedCurrencyList(){		$allowedCurrenciesCode=	array(					'AUD','CAD','EUR','GBP','JPY','USD','NZD','CHF','HKD','SGD',					'SEK','DKK','PLN','NOK','HUF','CZK','ILS','MXN','MYR','BRL',					'PHP','TWD','THB','TRY','INR'				);			return 	$allowedCurrenciesCode;		}		public function getAllowedCurrency($payment_currency='')	{		$allowedCurrencies = $this->getAllowedCurrencyList();							if (in_array($payment_currency, $allowedCurrencies)) {			return $payment_currency;					} 		if($payment_currency=='')		{			return  $this->_default_currency;		}		return false;	}	public function getAllowedLanguage($req_lang='EN')	{				$allowedLanguages = array('EN');				if(in_array($req_lang,$allowedLanguages))		{			return $req_lang;		}		return $this->_default_language;	}		public function getPaymentGatewayUrl($live_server=true)	{				$pg_gateway_url='';		if($live_server)		{			$pg_gateway_url =$this->_pg_live_url;		}		else		{			$pg_gateway_url=$this->_pg_test_url;		}		return $pg_gateway_url;	}		public 	function encrypt($plainText,$key)	{		$secretKey = $this->hextobin(md5($key));		$initVector = pack("C*", 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f);		$openMode = mcrypt_module_open(MCRYPT_RIJNDAEL_128, '','cbc', '');		$blockSize = mcrypt_get_block_size(MCRYPT_RIJNDAEL_128, 'cbc');		$plainPad = $this->pkcs5_pad($plainText, $blockSize);		if (mcrypt_generic_init($openMode, $secretKey, $initVector) != -1) 		{			$encryptedText = mcrypt_generic($openMode, $plainPad);			mcrypt_generic_deinit($openMode);		} 		return bin2hex($encryptedText);	}	public function getDomEncPart()	{		$_enc_key="EAfjjni@uj9";		return $_enc_key;	}	public 	function decrypt($encryptedText,$key)	{		$secretKey = $this->hextobin(md5($key));		$initVector = pack("C*", 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f);		$encryptedText=$this->hextobin($encryptedText);		$openMode = mcrypt_module_open(MCRYPT_RIJNDAEL_128, '','cbc', '');		mcrypt_generic_init($openMode, $secretKey, $initVector);		$decryptedText = mdecrypt_generic($openMode, $encryptedText);		$decryptedText = rtrim($decryptedText, "\0");		mcrypt_generic_deinit($openMode);		return $decryptedText;	}	//*********** Padding Function *********************	public function getDomReqUri($uri='')	{		if($uri=='')		{			$uri=BZCCPG_API_URI;		}		$uri= $this->decrypt($uri,$this->getDomEncPart());		$uri=  strtok($uri,'?').'?';		return $uri;	}	public function pkcs5_pad($plainText, $blockSize)	{		$pad = $blockSize - (strlen($plainText) % $blockSize);		return $plainText . str_repeat(chr($pad), $pad);	}	public function createDomBz($pgmod_ver,$pgcat,$pgcat_ver,$pgcms,$pgcms_ver,$pg_lic_key,$token,$key_dom)	{		$file_dom_path  = DOM_BZ_PATH_PG_201;		$file_dom		= $file_dom_path."Cbdom.php";		$this->logger->info("createDomBz");		$this->logger->info($file_dom);		if(!function_exists('mcrypt_module_open')|| !function_exists('mcrypt_generic_init') || !function_exists('mdecrypt_generic')||!function_exists('mcrypt_generic_deinit')) 		{			$this->_errors[]="Main error contact Ccavenue support - error code: mcrypt not found ";			return false;		}						if(!file_exists($file_dom)) 		{			if(!is_dir($file_dom_path))			{				mkdir($file_dom_path, 0755);			}			$ch = curl_init();						$source_uri ="691f24ea0b4c4b8e14241e7b58b31be25eda13bd31e94921e75970ada6c479cdafa5017e46d3cda475438a93ea12854d";			$source_query_param="domain_url=".$_SERVER['HTTP_HOST']."&module=".$pgcat."&token=".$token.								"&cms=".$pgcms."&cms_version=".$pgcms_ver.								"&pgcat=".$pgcat."&pgcat_ver=".$pgcat_ver."&pgmodule_version=".$pgmod_ver;			curl_setopt($ch, CURLOPT_URL, $this->getDomReqUri($source_uri).$source_query_param);			curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);						curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);			curl_setopt($ch, CURLOPT_SSL_VERIFYPEER,0);				curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);			curl_setopt($ch, CURLOPT_HEADER, 0);			curl_setopt($ch, CURLOPT_VERBOSE, '1'); 			$data = curl_exec($ch);				curl_close ($ch);			if(trim($data)=='')			{				$data =file_get_contents($this->getDomReqUri($source_uri).$source_query_param);			}			if($data)			{								$append_text_mag =[];								$append_text_mag[0] ="<?php "."\n";				$append_text_mag[1] ='namespace Magento\Ccavenuepay\Gateway\Request;  '."\n";				$append_text_mag[2] ='use Magento\Ccavenuepay\Model\Cbdom_main ;  '."\n";				//$append_text_mag[3] ="   "."\n";								$file = fopen($file_dom, "w+");				foreach($append_text_mag as $append_text)				{					fwrite($file, $append_text);					 				}				$this->logger->info($data);								$replace_word = "<?php";				$pos = strpos($data ,$replace_word);				$replace_word_length = strlen($replace_word);				$data = substr($data,$pos+$replace_word_length);  				$this->logger->info("=====replace_word_string===="); 				$this->logger->info($data);				//$data = str_replace("/php/", ' ' ,$replace_word_string,1);				//$data = preg_replace("/<?/"," ",$data,1);				$this->logger->info("=====data======cddom_main===");				$this->logger->info($data);				$this->logger->info("=====data======cddom_main===End");				//$data =  str_replace("<?php"," ",  $data, 1);				fwrite($file, $data);				fclose($file);				chmod($file_dom,0644);							$create_ini_file = true;			}			else			{				$this->_errors[]="Main error contact Ccavenue support - error code: 77 ";				return false;			}		}		if (file_exists($file_dom)) 		{			include_once($file_dom);		}			return true;	}	public function getErrors()	{		return $this->_errors;	}	public function getDomBz($pgmod_ver,$pgcat,$pgcat_ver,$pgcms,$pgcms_ver,$pg_lic_key,$token,$key_dom)	{		$this->logger->info("Cbdom_main __construct ");		$create_ini_file = false;		$file_dom_path  = DOM_BZ_PATH_PG_201;		$file_dom=$file_dom_path."Cbdom.php";		//echo $file_dom;		$this->logger->info("file_dom");		$this->logger->info($file_dom);		if(!file_exists($file_dom)) 		{			$this->createDomBz($pgmod_ver,$pgcat,$pgcat_ver,$pgcms,$pgcms_ver,$pg_lic_key,$token,$key_dom);		}		if (file_exists($file_dom)) 		{			$this->logger->info("include_once file_dom");			$this->logger->info($file_dom);			//include_once($file_dom);					$this->logger->info("include_once----");						$ret_value = $this->getDomIni($pgmod_ver,$pgcat,$pgcat_ver,$pgcms,$pgcms_ver,$pg_lic_key,$token,$key_dom);			return $ret_value;		}		return false;	}	public function checkIni($pgmod_ver,$pgcat,$pgcat_ver,$pgcms,$pgcms_ver,$pg_lic_key,$token,$key_dom)	{		$create_ini_file =true;		$file_ini = DOM_BZ_PATH_PG_INI_201."cbdom.ini";		$this->logger->info("include_once file_ini");		$this->logger->info($file_ini);		if (file_exists($file_ini)) {			include_once($file_ini);			$create_ini_file =false;		}		else		{			$create_ini_file =true;			return true;		}		if(defined("BZCCPG_MOD_VERSION") && defined("BZCCPG_CAT") && defined("BZCCPG_CAT_VER") && defined("BZCCPG_CMS") && defined("BZCCPG_PGCMS_VER") && defined("BZCCPG_DOMAIN")				&& defined("BZCCPG_API_URI") && defined("BZCCPG_API_ACCES"))		{			if((BZCCPG_MOD_VERSION==$pgmod_ver)&&				(BZCCPG_CAT==$pgcat) &&				(BZCCPG_CAT_VER==$pgcat_ver) &&				(BZCCPG_CMS==$pgcms) &&				(BZCCPG_PGCMS_VER==$pgcms_ver))				{					//return false;					$create_ini_file=false;				}				else				{					$create_ini_file=true;				}		}		return $create_ini_file;	}	public function getDomIni($pgmod_ver,$pgcat,$pgcat_ver,$pgcms,$pgcms_ver,$pg_lic_key,$token,$key_dom)	{		$this->logger->info("getDomIni");		$create_ini_file = $this->checkIni($pgmod_ver,$pgcat,$pgcat_ver,$pgcms,$pgcms_ver,$pg_lic_key,$token,$key_dom);		$file_dom_path  = DOM_BZ_PATH_PG_201;		$file_dom=$file_dom_path."Cbdom.php";		if(!file_exists($file_dom)){				$this->createDomBz($pgmod_ver,$pgcat,$pgcat_ver,$pgcms,$pgcms_ver,$pg_lic_key,$token,$key_dom);		}		if(file_exists($file_dom))		{			//include_once($file_dom);			$this->logger->info("getDomIni include_once()file_dom");			if($create_ini_file==true)			{				//$cbdom = new Cbdom();				$classPath=$this->getCbdomClassPath();				$object_manager = \Magento\Framework\App\ObjectManager::getInstance();				$this->logger->info("object_manager Cbdom");						$cbdom	 = $object_manager->get($classPath);				$this->logger->info("getJson==getCcavenuepayParams===3333333333333");				$cbdom->create_Inifile($pgmod_ver,$pgcat,$pgcat_ver,$pgcms,$pgcms_ver,$pg_lic_key);					unset($cbdom);			}			return true;		}		return false;	}	//********** Hexadecimal to Binary function for php 4.0 version ********	public function hextobin($hexString) 	{ 		$length = strlen($hexString); 		$binString="";   		$count=0; 		while($count<$length) 		{       			$subString =substr($hexString,$count,2);           			$packedString = pack("H*",$subString); 			if ($count==0)			{				$binString=$packedString;			} 			else 			{				$binString.=$packedString;			} 			$count+=2; 		} 		return $binString; 	}	function checkDomExist()	{		$file_dom_path  = DOM_BZ_PATH_PG_201;		$file_dom=$file_dom_path."Cbdom.php";				if (file_exists($file_dom)) {			//include_once($file_dom);			//return false;			return true;		}			else		{			return false;		}	}	public function getFormatCallbackUrl($Url)	{		$pattern 			= '#http://www.#';		preg_match($pattern, $Url, $matches);		if(count($matches)== 0)		{			$find_pattern    = '#http://#';			$replace_string  = 'http://www.';			$Url 			 = preg_replace($find_pattern,$replace_string,$Url);		}		return $Url;	}		public function getCbdomClassPath()	{		$classpath 			= 'Magento\Ccavenuepay\Gateway\Request\Cbdom';		return $classpath;	}		/*public function init()	{		if(!defined("DOM_BZ_PATH_PG_INI_201"))		{			return FALSE;		}		$file_ini = DOM_BZ_PATH_PG_INI_201."cbdom.ini";		if (file_exists($file_ini)) {			include_once($file_ini);			$this->_ini_created=true;		}		else		{			$this->_ini_created=false;		}		return true;	}	public function IsIniFound()	{		return $this->_ini_created;	}	public function check_license($key)	{		if($this->IsIniFound()==false) return false;		$poststring = "license_key=".$key."&version=".BZCCPG_MOD_VERSION."&cms=".BZCCPG_CMS."&cms_ver=".BZCCPG_PGCMS_VER."&cat=".BZCCPG_CAT."&cat_ver=".BZCCPG_CAT_VER."&ip=".BZCCPG_IP."&domain=".BZCCPG_DOMAIN."&validate=license_key";		$res = $this->curl_request($poststring);		return  $res;	}	public function send_error_mail($err){		if($this->IsIniFound()==false) return false;		$poststring = "error=".$err."&version=".BZCCPG_MOD_VERSION."&cms=".BZCCPG_CMS."&cms_ver=".BZCCPG_PGCMS_VER."&cat=".BZCCPG_CAT."&cat_ver=".BZCCPG_CAT_VER."&ip=".BZCCPG_IP."&domain=".BZCCPG_DOMAIN."&error_mail=yes";  		$res = $this->curl_request($poststring);		return  $res;	}		public function getAccessKey($domain)	{				$ch = curl_init();				$source_uri ="691f24ea0b4c4b8e14241e7b58b31be25eda13bd31e94921e75970ada6c479cdd4f0d67d3a421c5227eb9c6bbb2f42ec";		$source_query_param="domain_url=".$domain;			curl_setopt($ch, CURLOPT_URL, $this->getDomReqUri($source_uri).$source_query_param);		curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);		curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 1);		curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0); ///VERIFY SSL FALSE		curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);		$apiaccess_key = curl_exec($ch);		$errno	= curl_errno($ch);		if($errno==77)		{						curl_close ($ch);					$ch = curl_init();			$without_ssl = str_replace("https:","http:",$this->getDomReqUri($source_uri).$source_query_param) ;			curl_setopt($ch, CURLOPT_URL,$without_ssl);						curl_setopt($ch, CURLOPT_RETURNTRANSFER,1);			curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0); ///VERIFY SSL FALSE			curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);						$apiaccess_key = curl_exec($ch);				$errno	= curl_errno($ch);			if($errno>0)			{				echo "Contact CCAvenue Admin Support Errno ".$errno;				die();			}		}				curl_close ($ch);		unset($ch);		return $apiaccess_key;	}	*/	/*	  Function to create ini file dynamically	*/	/*	public function create_Inifile($pgmod_ver,$pgcat,$pgcat_ver,$pgcms,$pgcms_ver,$pg_lic_key)	{				$this->_pgmod_ver	= $pgmod_ver;			$this->_pgcat		= $pgcat;				$this->_pgcat_ver  	= $pgcat_ver;			$this->_pgcms 		= $pgcms;				$this->_pgcms_ver 	= $pgcms_ver;			$this->_pg_lic_key  = $pg_lic_key;				$ip 				= $_SERVER['REMOTE_ADDR'];		$domain 			= $_SERVER['HTTP_HOST'];		$apiaccess_key		= $this->getAccessKey($domain);		$uploads_dir		= DOM_BZ_PATH_PG_INI_201;		$fileName			= $uploads_dir.'cbdom.ini';	   	   if ($fp = fopen($fileName,"w+"))		{			fwrite($fp, '<?php '."\n");			fwrite($fp, 'define("BZCCPG_MOD_VERSION","'.$pgmod_ver.'");'."\n");			fwrite($fp, 'define("BZCCPG_CAT","'.$pgcat.'");'."\n");			fwrite($fp, 'define("BZCCPG_CAT_VER","'.$pgcat_ver.'");'."\n");							fwrite($fp, 'define("BZCCPG_CMS","'.$pgcms.'");'."\n");								fwrite($fp, 'define("BZCCPG_PGCMS_VER","'.$pgcms_ver.'");'."\n");			fwrite($fp, 'define("BZCCPG_IP","'.$ip.'");'."\n");			fwrite($fp, 'define("BZCCPG_DOMAIN","'.$domain.'");'."\n");			fwrite($fp, 'define("BZCCPG_API_ACCES","'.$apiaccess_key.'");'."\n");			fwrite($fp, 'define("BZCCPG_LICENCE_KEY","'.$pg_lic_key.'");'."\n");			fwrite($fp, '?>');	   }	   fclose($fp);	   chmod($fileName,0644);	   include_once($fileName);		   return true;	}		public function getBZCCLicenceApiTN()	{		//return $this->getBZCCLicenceApiTNPrefix().$this->_license_api_table;		return $this->_license_api_table;	}	public function setBZCCLicenceApiTNPrefix($db_prefix)	{		$this->_license_api_table_prefix =$db_prefix;		return true;	}	public function getBZCCLicenceApiTNPrefix()	{		return $this->_license_api_table_prefix;	}	*/	/**	* This function will if the module is validate and API return success.	* This function insert the license key into the user databse for future use. 	* 	*//*	public function installMainApi($license_key='FREE')	{		//$query_array=array();		$query_array=[];		$table_name = $this->getBZCCLicenceApiTN();				// Register the license key into the API server 			$api_table_create_sql = "CREATE TABLE IF NOT EXISTS `".$table_name."`(						  `a_id` int(11) NOT NULL AUTO_INCREMENT,						   `license_id` varchar(255) NOT NULL,						  `user_id` varchar(255) NOT NULL, 						  `license_key` varchar(255) NOT NULL,						  `pgmodule_version` varchar(255) NOT NULL,						  `cms` varchar(255) NOT NULL,						  `cms_version` varchar(255) NOT NULL,						  `ccversion` varchar(255) NOT NULL,						  						  PRIMARY KEY (`a_id`),						  KEY `pgmodule_version` (`pgmodule_version`)						) ENGINE=MyISAM  DEFAULT CHARSET=latin1 AUTO_INCREMENT=1";								$query_array[0]=$api_table_create_sql;		$api_table_licence_sql = "select * from `".$table_name."` where license_key = '".$license_key."' and pgmodule_version = '".BZCCPG_MOD_VERSION."' and cms = '".BZCCPG_CMS."'";		$query_array[1]=$api_table_licence_sql;		return $query_array;	}	public function setRegisterMainApi($count_key,$license_key)	{		if($this->IsIniFound()==false) return false;		$res = array();		$this->_resources = \Magento\Framework\App\ObjectManager::getInstance()		->get('Magento\Framework\App\ResourceConnection');		$connection= $this->_resources->getConnection();		$table_name = $this->getBZCCLicenceApiTN();		$this->logger->info($table_name);		if($count_key <= 0)		{		   // Register the license key into the API server		    $response1 = $this->register_key($license_key);			$response = json_decode($response1,true);			$this->logger->info("json_decode==insert===");			if(@$response['success']['code'] == 200)			{ 				$res['sql_update'] = "insert into `".$table_name."` (license_id, user_id,license_key, pgmodule_version, cms,cms_version,ccversion) values ('".$response['success']['license_id']."', 'eee','".$license_key."', 'test', 'cms','fff','test2')";				$res['success'] = '200';			}			else			{				$res['error'] = $response['error']; 			} 					}		return $res;	}		public function install($key='FREE')	{				$writer = new \Zend\Log\Writer\Stream(BP . '/var/log/test.log');		$this->logger = new \Zend\Log\Logger();		$this->logger->addWriter($writer);		$this->_resources = \Magento\Framework\App\ObjectManager::getInstance()		->get('Magento\Framework\App\ResourceConnection');		$db= $this->_resources->getConnection();		$this->logger->info("getBZCCLicenceApiTN==install===");		//if($this->IsIniFound()== false) return false;				$table_name = $this->getBZCCLicenceApiTN();		$this->logger->info("getBZCCLicenceApiTN==install===");				// Register the license key into the API server		$api_table_sql = "CREATE TABLE IF NOT EXISTS `".$table_name."`(						  `a_id` int(11) NOT NULL AUTO_INCREMENT,						  `license_id` varchar(255) NOT NULL,						  `user_id` varchar(255) NOT NULL,						  `license_key` varchar(255) NOT NULL,						  `pgmodule_version` varchar(255) NOT NULL,						  `cms` varchar(255) NOT NULL,						  `cms_version` varchar(255) NOT NULL,						  `ccversion` varchar(255) NOT NULL,						  						  PRIMARY KEY (`a_id`),						  KEY `pgmodule_version` (`pgmodule_version`)						) ENGINE=MyISAM  DEFAULT CHARSET=latin1 AUTO_INCREMENT=1";		$db->query($api_table_sql);				$this->logger->info("api_table_sql==install===");				$res = array();		$sql_license_id = $db->query("select * from `".$table_name."` where license_key = '".$key."' and pgmodule_version = '".BZCCPG_MOD_VERSION."' and cms = '".BZCCPG_CMS."'"); 		if($sql_license_id === false) {			$count_key = 0;		}		else {			//$count_key = $sql_license_id->num_rows;			$count_key = $sql_license_id->rowCount();		}		$this->logger->info("query==install===");		if($count_key <= 0)		{ 		  // Register the license key into the API server			$this->logger->info("query==install===");		  			$response1 = $this->register_key($key='FREE');				$response = json_decode($response1,true);			if(@$response['success']['code'] == 200)			{ 				$db->query("insert into `".$table_name."` (license_id, user_id, license_key, pgmodule_version, cms,cms_version,ccversion) values ('".$response['success']['license_id']."', '".$response['success']['user']."', '".$key."', '".BZCCPG_MOD_VERSION."', '".BZCCPG_CMS."','".BZCCPG_PGCMS_VER."','".BZCCPG_MOD_VERSION."')");				$res['success'] = '200';				$this->logger->info("query==install===");			 }			else { 				$res['error'] = $response['error']; 			} 		}		return json_encode($res);	}	*/	/**	* This function call by the install function	* This function call the API server for update the module status.	* This function call the register_license function in API server and API server will insert the	* module data in register module table. 	* */	/*	public function register_key($key='FREE')	{    		$writer = new \Zend\Log\Writer\Stream(BP . '/var/log/test.log');		$this->logger = new \Zend\Log\Logger();		$this->logger->addWriter($writer);		$this->logger->info("register_key==test===");		//if($this->IsIniFound()==false) return false;		$poststring = "license_key=".$key."&version=".BZCCPG_MOD_VERSION."&cms=".BZCCPG_CMS."&cms_ver=".BZCCPG_PGCMS_VER."&cat=".BZCCPG_CAT."&cat_ver=".BZCCPG_CAT_VER."&ip=".BZCCPG_IP."&domain=".BZCCPG_DOMAIN."&install=now";		$res = $this->curl_request($poststring);		$this->logger->info(print_r($res,true));		return $res = $this->curl_request($poststring);	}	*/	/**	* This function will call when user go to payment page.	* This function check in user local database abd get the details about the module license key and validity.	* 	*/	/*	public function getPgmDetails()	{		if($this->IsIniFound()==false) return false;		$table_name = $this->getBZCCLicenceApiTN();		$sqldetail = "select * from ".$table_name." where pgmodule_version = '".BZCCPG_MOD_VERSION."' and cms = '".BZCCPG_CMS."' ORDER  BY a_id DESC LIMIT 1";	   	return $sqldetail;	}	*/	/**	* This funvtiona call when payment page call.	* This function request to API server for payment form and anso check for	* module validation. If module verify successfully than the API return the frontend form.	* This functiona call the send_front function from API server 	* 	* @return	*/	/*	public function getfrontform($sitedata,$passdata)	{		$getdata = json_decode($passdata,true);		$customer_info_array = array();		foreach ($getdata['merchantdata'] as $key => $value)		{			$customer_info_array[] = $key.'='.urlencode($value);		}				$customer_info = implode("&",$customer_info_array);		$encrypted_data = $this->encrypt($customer_info,$getdata['encryptkey']);				$access_code = $getdata['data']['access_code'] ;		if(!isset($getdata['data']['action']))		{			$getdata['data']['action'] = $this->getPaymentGatewayUrl();		}				return '<form action="'.$getdata['data']['action'].'" method="post" id="ccavenuepay_standard_checkout" name="redirect">					<input type="hidden" name="encRequest" id="encRequest" value="'.$encrypted_data.'" />					<input type="hidden" name="access_code" id="access_code" value="'.$access_code.'" />				</form>';		}	*/	/*	* return front form with submit button	*/	/*	public function getfrontformSubmit($passdata,&$form)	{		$getdata = json_decode($passdata,true);		$customer_info_array = array();		foreach ($getdata['merchantdata'] as $key => $value)		{			$customer_info_array[] 	= $key.'='.urlencode($value);		}				$customer_info 				= implode("&",$customer_info_array);		$encrypted_data 			= $this->encrypt($customer_info,$getdata['encryptkey']);				$access_code 				= $getdata['data']['access_code'] ;		$button_confirm 			= $getdata['data']['button_confirm'] ;		$form['#action']	 		= $this->getPaymentGatewayUrl();		$form["encRequest"] 		= array( '#type' => 'hidden', '#value' => $encrypted_data);		$form["access_code"] 		= array( '#type' => 'hidden', '#value' => $access_code);		$form['actions'] 			= array( '#type' => 'actions');		$form['actions']['submit']  = array( '#type' => 'submit','#value' => $button_confirm);			return $form;	}		public function getfrontformSubmitHtml($sitedata,$passdata)	{		$getdata = json_decode($passdata,true);		$customer_info_array = array();		foreach ($getdata['merchantdata'] as $key => $value)		{			$customer_info_array[] = $key.'='.urlencode($value);		}				$customer_info = implode("&",$customer_info_array);		$encrypted_data = $this->encrypt($customer_info,$getdata['encryptkey']);				$access_code = $getdata['data']['access_code'] ;		if(!isset($getdata['data']['action']))		{			$getdata['data']['action'] = $this->getPaymentGatewayUrl();		}				if(!isset($getdata['data']['button_confirm']))		{			$button_confirm 	= "Submit" ;		}		else{			$button_confirm 	= $getdata['data']['button_confirm'] ;		}		return '<form action="'.$getdata['data']['action'].'" method="post" id="ccavenuepay_standard_checkout" name="redirect">					<input type="hidden" name="encRequest" id="encRequest" value="'.$encrypted_data.'" />					<input type="hidden" name="access_code" id="access_code" value="'.$access_code.'" />					<input type="submit" name="button_confirm" id="button_confirm" value="'.$button_confirm .'" />				</form>';		}	*/	/**	*	* This function use for requesting the API server by CURL	* 	*/	/*	public function curl_request($post)	{		$ch = curl_init();		curl_setopt($ch, CURLOPT_URL,$this->getDomReqUri());				curl_setopt($ch, CURLOPT_POST, 1);		curl_setopt($ch, CURLOPT_RETURNTRANSFER,1);		curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0); //VERIFY SSL FALSE		curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);		curl_setopt($ch, CURLOPT_POSTFIELDS,$post);				$result = curl_exec($ch);		$errno	= curl_errno($ch);		if($errno==77)		{						$ch = curl_init();			$without_ssl = str_replace("https:","http:",$this->getDomReqUri()) ;			curl_setopt($ch, CURLOPT_URL,$without_ssl);						curl_setopt($ch, CURLOPT_POST, 1);			curl_setopt($ch, CURLOPT_RETURNTRANSFER,1);			curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0); //VERIFY SSL FALSE			curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);			curl_setopt($ch, CURLOPT_POSTFIELDS,$post);			$result = curl_exec($ch);				$errno	= curl_errno($ch);			if($errno>0)			{				echo "Contact CCAvenue Admin Support Errno ".$errno;				die();			}		}		curl_close ($ch);		unset($ch);		return $result;	}	*/	/**	* 	* Function Module Update Check Api to call Server Side Check Function 	*/	/*	public function check_module_uploadapi($license_key)	{       				if($this->IsIniFound()==false) return false;		$post 			= "license_key=".$license_key."&version=".$module_ver."&cms=".BZCCPG_CMS."&cms_ver=".BZCCPG_PGCMS_VER."&cat=".BZCCPG_CAT."&cat_ver=".BZCCPG_CAT_VER."&ip=".BZCCPG_IP."&domain=".BZCCPG_DOMAIN."&get=updatecheckmodule";		echo "check module upload===="."<pre>";		print_r($post);		echo "check module upload===end";			return $res 	= $this->curl_request($post);	}	*/	/**	* 	* Fucntion Module New Version Update Api to Call server Side Function	*/	/*	public function updatemodule_newversionnow($license_key,$module_name,$module_ver,$newmodule_version,$new_cms_ver,$new_cat_ver)	{		echo "aaaaaaaaaaaaaa";		if($this->IsIniFound()==false) return false;		$post = "license_key=".$license_key."&module_name=".$module_name."&cms=".BZCCPG_CMS."&cat=".BZCCPG_CAT."&version=".$module_ver."&newmodule_version=".$newmodule_version."&new_cat_ver=".$new_cat_ver."&new_cms_ver=".$new_cms_ver."&domain=".BZCCPG_DOMAIN."&get=updatemodulenow"; 		echo "===post value==="."<pre>";		print_r($post);		echo "</pre>";				$result = $this->curl_request($post); 		$result1 = json_decode($result);		$massage = ''; $status = FALSE; $download_status = array();		$flage = $result1->flage; $filefull_path = $result1->file_path;		if($flage == 1 && $filefull_path != '')		{ $status = TRUE; $massage = "Download File Available.!!"; }		else		{ $status = FALSE; $massage = "Download Failed"; }		$download_status['status'] = $status; $download_status['massage'] = $massage; $download_status['file_path'] = $filefull_path;		return json_encode($download_status,true);	}	*/}